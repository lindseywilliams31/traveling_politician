"""
A script application to apply the funcitons in traveling_politician.

Authors: Lindsey Williams

Date: April 27, 2020
"""

#importaing data frame of long/lat
import pandas as pand
df_allcities = pand.read_csv("capitals_and_dc.csv")

# creating classes and modules

import itertools

class Point:
    """ Point class represents and manipulates x,y coords. """

    def __init__(self, x=0, y=0):
        """ Create a new point at x, y """
        self.x = x
        self.y = y


class State:
    """ Point class represents a state and holds a point(coordinates) """

    def __init__(self, abbrev= "ST", point=Point(2,2)):
        """ Create a new point at x, y """
        self.abbrev = abbrev
        self.point = point


#V.0

import math
def distance(point1=2, point2=2):
    """
    A function that takes 2 points and calculates the straight
    line difference between them in miles

    Precondition: point1 and point2 must be point class with both with
    floats for x and y
    """
    sqd_value = ((point1.x-point2.x)**2)+((point1.y-point2.y)**2)
    value = math.sqrt(sqd_value)
    return value*69.2

#V.1
# making state objects
alabama= State("AL") ; alaska = State("AK") ; arizona= State("AZ") ; arkansas= State("AR")
california= State("CA") ; colorado= State("CO") ; connecticut= State("CT")
delaware= State("DE") ; florida= State("FL") ; georgia= State("GA") ; hawaii= State("HI")
idaho= State("ID") ; illinois= State("IL") ; indiana= State("IN") ; iowa = State("IA")
kansas= State("KS") ; kentucky= State("KY") ; louisiana= State("LA") ; maine= State("ME")
maryland= State("MD") ; massachusetts= State("MA") ; michigan= State("MI")
minnesota= State("MN") ; mississippi= State("MS") ; missouri= State("MO")
montana= State("MT") ; nebraska= State("NE") ; nevada= State("NV")
new_hampshire= State("NH") ; new_jersey= State("NJ") ; new_mexico= State("NM")
new_york= State("NY") ; north_carolina= State("NC") ; north_dakota= State("ND")
ohio= State("OH") ; oklahoma= State("OK") ; oregon= State("OR") ; pennsylvania= State("PA")
rhode_island= State("RI") ; south_carolina= State("SC") ; south_dakota= State("SD")
tennessee= State("TN") ; texas= State("TX") ; utah= State("UT") ; vermont= State("VT")
virginia= State("VA") ; washington= State("WA") ; west_virginia= State("WV")
wisconsin= State("WI") ; wyoming= State("WI") ; d_c = State("DC")

#state string conversion
ss_1 = ["alabama", "alaska", "arizona", "arkansas", "california", "colorado"]
ss_2 = ["connecticut", "delaware", "florida", "georgia", "hawaii", "idaho"]
ss_3 = ["illinois","indiana","iowa","kansas","kentucky","louisiana","maine"]
ss_4 = ["maryland","massachusetts","michigan","minnesota","mississippi"]
ss_5 = ["missouri","montana","nebraska","nevada","new hampshire","new jersey"]
ss_6 = ["new mexico","new york","north carolina","north dakota","ohio"]
ss_7 = ["oklahoma","oregon","pennsylvania","rhode island","south carolina"]
ss_8 = ["south dakota","tennessee","texas","utah","vermont","virginia"]
ss_9 = ["washington","west virginia","wisconsin","wyoming"]
state_strings = ss_1+ss_2+ss_3+ss_4+ss_5+ss_6+ss_7+ss_8+ss_9

so_1 = [alabama, alaska, arizona, arkansas, california, colorado]
so_2 = [connecticut, delaware, florida, georgia, hawaii, idaho]
so_3 = [illinois,indiana,iowa,kansas,kentucky,louisiana,maine]
so_4 = [maryland,massachusetts,michigan,minnesota,mississippi]
so_5 = [missouri,montana,nebraska,nevada,new_hampshire,new_jersey]
so_6 = [new_mexico,new_york,north_carolina,north_dakota,ohio]
so_7 = [oklahoma,oregon,pennsylvania,rhode_island,south_carolina]
so_8 = [south_dakota,tennessee,texas,utah,vermont,virginia]
so_9 = [washington,west_virginia,wisconsin,wyoming]
state_objects = so_1+so_2+so_3+so_4+so_5+so_6+so_7+so_8+so_9

#loading state object attributes using data frame
d_c.point = Point(df_allcities.iat[50,3],df_allcities.iat[50,4])
def assign():
    run_through = 0
    for state in state_objects:
        state.point = Point(df_allcities.iat[run_through,3],df_allcities.iat[run_through,4])
        run_through = run_through + 1
assign()

#functions that do calcultations

def distance_start_to_end(list):
    """
    A function that calculates the distance of this order of stops

    Precondition: list must be a list of States
    """
    dist = 0
    for a in range(len(list)-1):
        point1=(list[a]).point
        point2=(list[a+1]).point
        working_distance = distance(point1, point2)
        dist += working_distance
    return dist

#V.2

def every_order(lst):
    """
    A function that returns a list of lists of the different orders of states

    Precondition: list must be a list of States (-IA and -DC)
    """

    # If there is only one element in lst then, only
    # one permuatation is possible
    if len(lst) == 1:
        lst.insert(0, iowa)
        lst.append(d_c)
        return [lst]
    l = []
    for i in range(len(lst)):
        m = lst[i]
        remLst = lst[:i] + lst[i+1:]
        if len(remLst) == 1:
            remLst.insert(0,m)
            l.append(remLst)
        else:     #V.3
            for p in itertools.permutations(remLst):
                list_p=[]
                for every in range(len(p)):
                    list_p.append(p[every])
                list_p.insert(0,m)
                l.append(list_p)
    for a in l:
        a.insert(0, iowa)
        a.append(d_c)
    return l


def making_dict(l):
    """
    A function that returns a dictionary of lists of all orders and distance it takes

    Precondition: list must be a list of lists of States
    """
    dictionary={}
    for order in l:
        distance=distance_start_to_end(order)
        stg=""
        for ste in order:
            if ste == order[-1]:
                stg=stg+(ste.abbrev)
            else:
                stg=stg+(ste.abbrev)+":"
        dictionary[stg]=distance
    return dictionary


def choose_shortest(dictt):
    """
    A function that makes a tuple with the single key and lowest value

    Precondition: dictt is a dicitonary with at least one entry
    """

    min_value = min(dictt.values())
    min_key = [key for key in dictt if dictt[key] == min_value]
    for a in min_key:
        min_key_s = a
    return (min_key_s, min_value)

def all_together(lst):
    """
    A function that takes a list of state objects and spits out the order and
    distance in a dictionary to go that is the shortest path

    Precondition: list is empty or only conists of state objects
    """
    return choose_shortest(making_dict(every_order(lst)))

# user interface code

def quit_if_input(s):
    """
    Quits Python if s is either 'q' or 'quit', printing a goodbye in the process.

    Parameter s: the string to check.
    Precondition: s is a string.
    """
    if s in ['q', 'quit']:
        print('Goodbye!')
        quit()

if __name__ == '__main__':
    welcome = "Welcome to the travling politican calculater!\n"
    welcome += "Here, you can determine which route is the shortest.\n"
    welcome += "Type one of the state names (full name)\n"
    welcome += "that you would like to visist (you can add more after)\n"
    welcome += "or type 'none' if you are taking a direct route from Iowa to DC.\n"
    welcome += "or type 'all' to visit all states.\n"
    welcome += "Type 'q' to quit.\n"
    welcome += "What would you like to do?"
    print(welcome)
    working_list= []
    msg = input('> ').strip().lower()
    while msg not in ['q', 'quit']:
        if msg == 'none':
            direct_d = distance_start_to_end([iowa, d_c])
            print ("The only route is IA:DC and it is "+str(direct_d)+" miles.")
            print ("Press q to quit")
        elif msg == 'all':
            mini_t = all_together(state_objects[:15]+state_objects[16:50])
            print ("The shortest route is "+mini_t[0]+ " and it is "+str(mini_t[1])+" miles.")
            print ("Press q to quit")
        elif msg in state_strings:
            working_list.append(state_objects[state_strings.index(msg)])
            print("Type another state name or type 'calculate'")
        elif msg == 'calculate':
            mini_t = all_together(working_list)
            print ("The shortest route is "+mini_t[0]+ " and it is "+str(mini_t[1])+" miles.")
            print ("Press q to quit")
        else:
            print("Sorry, your command was not recognized, please try again!")
        msg = input('> ').strip().lower()

    print('Goodbye and good luck on your campaign!')
